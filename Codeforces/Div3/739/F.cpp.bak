#include <bits/stdc++.h>
#include <print.hpp>
using namespace std;
#define ll long long
#define ld long double
#define REP(i,m,n) for(int i=(int)(m); i<(int)(n); i++)
#define rep(i,n) REP(i,0,n)
#define RREP(i,m,n) for(int i=(int)(m); i>=(int)(n); i--)
#define rrep(i,n) RREP(i,(n)-1,0)
#define all(v) v.begin(), v.end()
#define endk '\n'
const int inf = 1e9+7;
const ll longinf = 1LL<<60;
const ll mod = 1e9+7;
const ld eps = 1e-10;
template<typename T1, typename T2> inline void chmin(T1 &a, T2 b){if(a>b) a=b;}
template<typename T1, typename T2> inline void chmax(T1 &a, T2 b){if(a<b) a=b;}

void solve() {
  ll n; int _k; cin >> n >> _k;
  ll n_org = n;
  vector<int> D;
  while(n) {
    D.push_back(n%10);
    n /= 10;
  }
  D.push_back(0);
  reverse(all(D));
  int d = D.size();
  vector<int> popcount(1<<10);
  rep(i, 1<<10) popcount[i] = __builtin_popcount(i);
  vector<vector<vector<ll>>> dp(1<<10, vector<vector<ll>>(d+1, vector<ll>(2, n_org*10)));
  dp[0][0][0] = 0;
  dp[0][1][0] = 0;
  rep(i, d) { // index
    rep(j, 1<<10) { // used set
      rep(k, 10) { // next
        int ne = j|1<<k;
        if(popcount[ne] > _k) continue;
        chmin(dp[ne][i+1][1], dp[j][i][1]*10+k);
        if(k > D[i]) {
          chmin(dp[ne][i+1][1], dp[j][i][0]*10+k);
        } else if(k == D[i]) {
          chmin(dp[ne][i+1][0], dp[j][i][0]*10+k);
        }
      }
    }
  }
  ll ans = longinf;
  rep(j, 1<<10) {
    if(popcount[j] > _k) continue;
    if(dp[j][d][0] >= n) chmin(ans, dp[j][d][0]);
    chmin(ans, dp[j][d][1]);
  }
  cout << ans << endk;
}
int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  int T;
  cin >> T;
  while(T--) solve();
  return 0;
}
